import time
import os
import json
import random
import socket
from datetime import datetime
from contextlib import suppress

from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import WebDriverException

# ===================== –ö–û–ù–§–ò–ì =====================
keywords = ["–Ω–æ–≤–æ—Å—Ç–∏", "—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏"]  # —Ç–≤–æ–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞

# –ö–∞—Ä—Ç–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ -> id —Ä–∞–¥–∏–æ–∫–Ω–æ–ø–æ–∫ (–ø—Ä–æ–≤–µ—Ä—å id –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤)
view_ranges = {
    "1–∫-10–∫": "views1",
    "10–∫-50–∫": "views2",
    "50–∫-100–∫": "views3",
    "–±–æ–ª–µ–µ 100–∫": "views4"
}

SEARCH_URL     = "https://tgstat.ru/search"
download_dir   = os.path.abspath("downloads")
log_file       = "tgstat_log.txt"
progress_file  = "progress.json"
max_attempts   = 3

# –î–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD.MM.YYYY
START_DATE = "01.08.2025"
END_DATE   = "07.08.2025"

# –õ–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å –∫ chromedriver (–ø–æ–¥ Mac M1/Homebrew)
CHROMEDRIVER_PATH = "/opt/homebrew/bin/chromedriver"

# –ê–¥—Ä–µ—Å devtools-–¥–µ–±–∞–≥–≥–µ—Ä–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–Ω–æ–≥–æ Chrome
DEBUG_ADDRESS = os.environ.get("CHROME_DEBUG_ADDRESS", "127.0.0.1:9222")

# –ò—Å–∫–ª—é—á–∞—é—â–∏–µ —Å–ª–æ–≤–∞ –≤ –ø–æ–∏—Å–∫–µ
EXCLUDE_BLOCK = (
    "-—Ä–µ—Ü–µ–ø—Ç -–µ–¥–∞ -–∫–æ—Å–º–µ—Ç–∏–∫–∞ -–º–æ–¥–∞ -–±—Ä–µ–Ω–¥ -—Å–∫–∏–¥–∫–∞ -–ø—Ä–æ–º–æ -–≤–∫—É—Å -–¥–æ—Å—Ç–∞–≤–∫–∞ "
    "-–ø–∞—Ä—Ñ—é–º -—Ñ—É—Ç–±–æ–ª -—Å–ø–æ—Ä—Ç -–∏–≥—Ä–∞ -–∞–Ω–∏–º–µ -—Ñ–∏–ª—å–º -–ø–µ—Å–Ω—è -–∞–ª—å–±–æ–º -—Ç—Ä–µ–∫ "
    "-—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è -NFT -–±—å—é—Ç–∏ -–∫–æ–Ω–∫—É—Ä—Å -–≥–æ—Ä–æ—Å–∫–æ–ø -—ç–∑–æ—Ç–µ—Ä–∏–∫–∞"
)

# "–ß–µ–ª–æ–≤–µ—á–Ω—ã–µ" –∑–∞–¥–µ—Ä–∂–∫–∏
HUMAN_DELAY_SHORT = (0.3, 0.8)
HUMAN_DELAY_MED   = (0.8, 1.8)
HUMAN_DELAY_LONG  = (1.5, 3.0)
TYPE_DELAY        = (0.05, 0.18)

# ===================== –£–¢–ò–õ–ò–¢–´ =====================
def log(message, level="INFO"):
    ts = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    line = f"[{level}] {ts} - {message}"
    print(line)
    with open(log_file, "a", encoding="utf-8") as f:
        f.write(line + "\n")

def human_sleep(bounds=HUMAN_DELAY_MED):
    time.sleep(random.uniform(*bounds))

def random_scroll_jitter(driver):
    jitter = random.randint(-180, 220)
    driver.execute_script("window.scrollBy(0, arguments[0]);", jitter)

def type_like_human(element, text, delay_range=TYPE_DELAY, clear_first=True):
    if clear_first:
        element.clear()
        human_sleep(HUMAN_DELAY_SHORT)
    for ch in text:
        element.send_keys(ch)
        time.sleep(random.uniform(*delay_range))
    human_sleep(HUMAN_DELAY_SHORT)

def load_progress():
    if not os.path.exists(progress_file):
        return {}
    with open(progress_file, "r", encoding="utf-8") as f:
        try:
            data = json.load(f)
            return {k: {r: True for r in v} if isinstance(v, list) else dict(v) for k, v in data.items()}
        except Exception:
            return {}

def save_progress(progress):
    tmp = progress_file + ".tmp"
    with open(tmp, "w", encoding="utf-8") as f:
        json.dump(progress, f, ensure_ascii=False, indent=2)
    with suppress(Exception):
        os.replace(tmp, progress_file)

def is_done(progress, keyword, range_label):
    return progress.get(keyword, {}).get(range_label, False) is True

def mark_done(progress, keyword, range_label):
    progress.setdefault(keyword, {})
    progress[keyword][range_label] = True
    save_progress(progress)

def _port_open(host, port, timeout=1.0):
    s = socket.socket()
    s.settimeout(timeout)
    try:
        s.connect((host, port))
        return True
    except Exception:
        return False
    finally:
        s.close()

# ===================== –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –ö CHROME =====================
def connect_to_existing_chrome(debug_address=DEBUG_ADDRESS, retries=15, pause=1.0):
    host, port_str = debug_address.split(":")
    port = int(port_str)
    for attempt in range(1, retries + 1):
        try:
            if not _port_open(host, port):
                time.sleep(pause)
                continue
            opts = webdriver.ChromeOptions()
            opts.add_experimental_option("debuggerAddress", debug_address)
            driver = webdriver.Chrome(service=Service(CHROMEDRIVER_PATH), options=opts)
            return driver
        except WebDriverException as e:
            log(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Chrome (–ø–æ–ø—ã—Ç–∫–∞ {attempt}/{retries}): {e}", "ERROR")
            time.sleep(pause)
    raise RuntimeError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–Ω–æ–º—É Chrome –ø–æ {debug_address}")

# ===================== CLOUDFLARE –ì–ê–†–î =====================
def wait_for_cloudflare(driver, ping_every_sec: int = 3, post_clear_wait: float = 0.8):
    elapsed = 0
    indicators = (
        "checking your browser",
        "–ø—Ä–æ–≤–µ—Ä–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞",
        "please wait while we check your browser",
        "ddos protection by cloudflare",
        "cloudflare"
    )
    while True:
        html = driver.page_source.lower()
        url  = driver.current_url.lower()
        challenge = (
            any(ind in html for ind in indicators) or
            "/cdn-cgi/" in url or
            "challenge" in url or
            "captcha" in html
        )
        if challenge:
            if elapsed == 0:
                log("üîí –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ Cloudflare. –ñ–¥—É —Ä—É—á–Ω–æ–≥–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è‚Ä¶")
            time.sleep(ping_every_sec)
            elapsed += ping_every_sec
            continue
        time.sleep(post_clear_wait)
        log("üîì –ü—Ä–æ–≤–µ—Ä–∫–∞ Cloudflare –ø—Ä–æ–π–¥–µ–Ω–∞. –ü—Ä–æ–¥–æ–ª–∂–∞—é.")
        return

def is_cloudflare_active(driver):
    html = driver.page_source.lower()
    url  = driver.current_url.lower()
    indicators = (
        "checking your browser",
        "–ø—Ä–æ–≤–µ—Ä–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞",
        "please wait while we check your browser",
        "ddos protection by cloudflare",
        "cloudflare",
        "captcha"
    )
    return any(ind in html for ind in indicators) or "/cdn-cgi/" in url or "challenge" in url

# ======== –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –ö–û–ù–¢–ï–ö–°–¢–ê –ü–û–°–õ–ï CF –ü–ï–†–ï–ë–†–û–°–ê –ù–ê /search ========
def is_on_initial_search_page(driver):
    """–ü–æ–Ω–∏–º–∞–µ–º, —á—Ç–æ –Ω–∞—Å –≤–µ—Ä–Ω—É–ª–æ –Ω–∞ —Å—Ç–∞—Ä—Ç–æ–≤—É—é /search (–±–µ–∑ —Ñ–æ—Ä–º—ã –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤)."""
    url_ok = driver.current_url.split("?")[0].rstrip("/") == SEARCH_URL
    has_start = len(driver.find_elements(By.ID, "startdate")) > 0
    has_end   = len(driver.find_elements(By.ID, "enddate")) > 0
    has_iskat = len(driver.find_elements(By.XPATH, "//button[normalize-space()='–ò—Å–∫–∞—Ç—å']")) > 0
    return url_ok and not (has_start or has_end or has_iskat)

def recover_to_params_page(driver, wait, keyword):
    """–ï—Å–ª–∏ –Ω–∞—Å –≤—ã–∫–∏–Ω—É–ª–æ –Ω–∞ /search ‚Äî –ø–æ–≤—Ç–æ—Ä–Ω–æ –≤–≤–æ–¥–∏–º –∑–∞–ø—Ä–æ—Å –∏ –¥–æ–∂–∏–¥–∞–µ–º—Å—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤."""
    if is_on_initial_search_page(driver):
        log("‚Ü©Ô∏è –í–µ—Ä–Ω—É–ª–æ –Ω–∞ —Å—Ç–∞—Ä—Ç–æ–≤—É—é /search. –ü–æ–≤—Ç–æ—Ä—è—é –≤–≤–æ–¥ –∑–∞–ø—Ä–æ—Å–∞ –∏ –ø–µ—Ä–µ—Ö–æ–∂—É –∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º‚Ä¶")
        search_input = WebDriverWait(driver, 30).until(EC.presence_of_element_located((By.NAME, "q")))
        full_query = f"{keyword} {EXCLUDE_BLOCK}"
        type_like_human(search_input, full_query)
        search_input.send_keys(Keys.RETURN)
        wait_for_params_page(driver, wait, timeout=30)

def await_condition_with_cf(driver, cond_fn, timeout=60, poll=0.5, describe="–æ–∂–∏–¥–∞–Ω–∏–µ —É—Å–ª–æ–≤–∏—è", on_cf_cleared=None):
    """
    –ñ–¥—ë—Ç cond_fn() == True, –ø–µ—Ä–µ–∂–∏–¥–∞—è Cloudflare; –ø–æ—Å–ª–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è CF –≤—ã–∑—ã–≤–∞–µ—Ç on_cf_cleared(),
    —á—Ç–æ–±—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤–µ—Ä–Ω—É—Ç—å—Å—è —Å–æ —Å—Ç–∞—Ä—Ç–æ–≤–æ–π /search –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤).
    """
    end = time.time() + timeout
    while True:
        if is_cloudflare_active(driver):
            log(f"üîí Cloudflare –≤–æ –≤—Ä–µ–º—è {describe}. –ñ–¥—É –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è‚Ä¶")
            wait_for_cloudflare(driver)
            if on_cf_cleared:
                try:
                    on_cf_cleared()
                except Exception as e:
                    log(f"on_cf_cleared –æ—à–∏–±–∫–∞: {e}", "ERROR")
            end = time.time() + timeout  # –¥–∞—Ç—å –ø–æ–ª–Ω—ã–π —Ç–∞–π–º–∞—É—Ç –∑–∞–Ω–æ–≤–æ

        try:
            if cond_fn():
                return True
        except Exception:
            pass
        if time.time() > end:
            raise TimeoutError(f"–¢–∞–π–º–∞—É—Ç: {describe}")
        time.sleep(poll)

# ===================== –õ–û–ì–ò–ö–ê –°–¢–†–ê–ù–ò–¶–´ =====================
def wait_for_params_page(driver, wait, timeout=30):
    def cond():
        return any([
            len(driver.find_elements(By.XPATH, "//form[.//input[contains(@name, 'facets')]]")) > 0,
            len(driver.find_elements(By.XPATH, "//label[@for='views1' or @for='views2' or @for='views3' or @for='views4']")) > 0,
            len(driver.find_elements(By.CSS_SELECTOR, "button.search-button.btn.btn-dark.btn-block")) > 0,
            len(driver.find_elements(By.XPATH, "//button[normalize-space()='–ò—Å–∫–∞—Ç—å']")) > 0,
            len(driver.find_elements(By.ID, "startdate")) > 0,
            len(driver.find_elements(By.ID, "enddate")) > 0,
        ])
    await_condition_with_cf(
        driver, cond, timeout=timeout,
        describe="–∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤",
        on_cf_cleared=lambda: None  # —Å—é–¥–∞ –Ω–µ –Ω—É–∂–µ–Ω keyword
    )

def set_date_range(driver, start_date: str, end_date: str, wait=None, keyword=None):
    # –∂–¥—ë–º –ø–æ–ª—è; –µ—Å–ª–∏ CF –∫–∏–Ω–µ—Ç –Ω–∞–∑–∞–¥ ‚Äî –≤–µ—Ä–Ω—ë–º—Å—è
    await_condition_with_cf(
        driver, lambda: len(driver.find_elements(By.ID, "startdate")) > 0,
        timeout=30, describe="–ø–æ–ª—è startdate",
        on_cf_cleared=(lambda: recover_to_params_page(driver, wait, keyword) if (wait and keyword) else None)
    )
    await_condition_with_cf(
        driver, lambda: len(driver.find_elements(By.ID, "enddate")) > 0,
        timeout=30, describe="–ø–æ–ª—è enddate",
        on_cf_cleared=(lambda: recover_to_params_page(driver, wait, keyword) if (wait and keyword) else None)
    )

    start_el = driver.find_element(By.ID, "startdate")
    end_el   = driver.find_element(By.ID, "enddate")

    for el, val in [(start_el, start_date), (end_el, end_date)]:
        driver.execute_script("""
            const el = arguments[0], val = arguments[1];
            el.value = val;
            el.dispatchEvent(new Event('input', {bubbles:true}));
            el.dispatchEvent(new Event('change', {bubbles:true}));
            """, el, val)
        human_sleep(HUMAN_DELAY_SHORT)
    log(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–µ—Ä–∏–æ–¥: {start_date} ‚Äî {end_date}")

def submit_secondary_search(driver, wait, results_timeout=60, keyword=None):
    locators = [
        (By.CSS_SELECTOR, "form button.search-button.btn.btn-dark.btn-block"),
        (By.XPATH, "//form//button[normalize-space()='–ò—Å–∫–∞—Ç—å']"),
        (By.XPATH, "//form//button[contains(@class,'search-button')]"),
        (By.XPATH, "//form//input[@type='submit' and (contains(@value,'–ò—Å–∫–∞—Ç—å') or contains(@value,'–ü–æ–∏—Å–∫'))]")
    ]
    btn = None
    for by, sel in locators:
        try:
            btn = WebDriverWait(driver, 15).until(EC.element_to_be_clickable((by, sel)))
            break
        except Exception:
            continue
    if not btn:
        raise RuntimeError("–ù–µ –Ω–∞—à—ë–ª –∫–Ω–æ–ø–∫—É '–ò—Å–∫–∞—Ç—å'.")
    driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", btn)
    human_sleep(HUMAN_DELAY_MED)
    btn.click()
    human_sleep(HUMAN_DELAY_SHORT)

    def results_loaded():
        return (
            len(driver.find_elements(By.XPATH, "//a[contains(text(),'–≠–∫—Å–ø–æ—Ä—Ç –≤ Excel')]") ) > 0 or
            len(driver.find_elements(By.XPATH, "//*[contains(@class,'results') or contains(@class,'search-results')]") ) > 0 or
            len(driver.find_elements(By.XPATH, "//*[contains(.,'–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ') or contains(.,'–Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')]") ) > 0
        )
    await_condition_with_cf(
        driver, results_loaded, timeout=results_timeout,
        describe="–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ—Å–ª–µ '–ò—Å–∫–∞—Ç—å'",
        on_cf_cleared=(lambda: recover_to_params_page(driver, wait, keyword) if keyword else None)
    )
    log("–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '–ò—Å–∫–∞—Ç—å', —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±–Ω–æ–≤–∏–ª–∏—Å—å.")

def wait_for_download_to_finish(timeout=90):
    log("–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏...")
    elapsed = 0
    while elapsed < timeout:
        if not any(f.endswith(".crdownload") for f in os.listdir(download_dir)):
            log("–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
            return True
        time.sleep(1)
        elapsed += 1
    log("–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–µ–∫–ª–æ", "ERROR")
    return False

def select_view_range_by_id(driver, wait, input_id, keyword=None):
    try:
        # –∂–¥—ë–º label; –µ—Å–ª–∏ CF –∫–∏–Ω—É–ª –Ω–∞–∑–∞–¥ ‚Äî –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–º—Å—è
        await_condition_with_cf(
            driver,
            lambda: len(driver.find_elements(By.XPATH, f"//label[@for='{input_id}']")) > 0,
            timeout=30,
            describe=f"–ø–æ—è–≤–ª–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞ {input_id}",
            on_cf_cleared=(lambda: recover_to_params_page(driver, wait, keyword) if keyword else None)
        )
        label = driver.find_element(By.XPATH, f"//label[@for='{input_id}']")
        driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", label)
        human_sleep(HUMAN_DELAY_SHORT)
        label.click()
        human_sleep(HUMAN_DELAY_SHORT)
        wait_for_cloudflare(driver)
        # –Ω–∞ —Å–ª—É—á–∞–π –ø–µ—Ä–µ–±—Ä–æ—Å–∞ ‚Äî –≤–µ—Ä–Ω—ë–º—Å—è
        if keyword:
            recover_to_params_page(driver, wait, keyword)
        log(f"–í—ã–±—Ä–∞–Ω —Ñ–∏–ª—å—Ç—Ä: {input_id}")
        return True
    except Exception as e:
        log(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä {input_id}: {e}", "ERROR")
        return False

def export_and_rename(driver, wait, keyword, range_label):
    try:
        def export_btn_ready():
            return len(driver.find_elements(By.XPATH, "//a[contains(text(), '–≠–∫—Å–ø–æ—Ä—Ç –≤ Excel')]") ) > 0
        await_condition_with_cf(
            driver, export_btn_ready, timeout=60,
            describe="–∫–Ω–æ–ø–∫–∏ '–≠–∫—Å–ø–æ—Ä—Ç –≤ Excel'",
            on_cf_cleared=(lambda: recover_to_params_page(driver, wait, keyword) if keyword else None)
        )

        export_btn = driver.find_element(By.XPATH, "//a[contains(text(), '–≠–∫—Å–ø–æ—Ä—Ç –≤ Excel')]")
        driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", export_btn)
        human_sleep(HUMAN_DELAY_MED)
        export_btn.click()
        human_sleep(HUMAN_DELAY_SHORT)

        wait_for_cloudflare(driver)
        if keyword:
            recover_to_params_page(driver, wait, keyword)

        log(f"–í—ã–≥—Ä—É–∑–∫–∞: {keyword} [{range_label}]")
        if wait_for_download_to_finish():
            files = sorted(
                [os.path.join(download_dir, f) for f in os.listdir(download_dir) if f.endswith(".xlsx")],
                key=os.path.getmtime, reverse=True
            )
            if not files:
                log("‚õî Excel-—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏", "ERROR")
                return False
            latest_file = files[0]
            safe_keyword = keyword.strip().replace(" ", "_")
            safe_range = (range_label.strip()
                          .replace(" ", "_")
                          .replace("–∫", "k").replace("–ö", "k")
                          .replace("/", "-"))
            new_name = f"{safe_keyword}__{safe_range}.xlsx"
            new_path = os.path.join(download_dir, new_name)
            if os.path.exists(new_path):
                os.remove(new_path)
            os.rename(latest_file, new_path)
            log(f"–°–æ—Ö—Ä–∞–Ω—ë–Ω: {new_name}")
            return True
        return False
    except Exception as e:
        log(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}", "ERROR")
        return False

# ===================== –û–°–ù–û–í–ù–û–ô –ü–û–¢–û–ö =====================
def process_keyword(driver, wait, keyword, progress):
    log(f"–û–±—Ä–∞–±–æ—Ç–∫–∞: {keyword}")
    for range_label, input_id in view_ranges.items():
        if is_done(progress, keyword, range_label):
            log(f"–ü—Ä–æ–ø—É—Å–∫: —É–∂–µ –µ—Å—Ç—å {keyword} [{range_label}]")
            continue
        attempt = 1
        while attempt <= max_attempts:
            try:
                # –ü–µ—Ä–≤—ã–π –ø–æ–∏—Å–∫
                driver.get(SEARCH_URL)
                human_sleep(HUMAN_DELAY_MED)
                wait_for_cloudflare(driver)
                recover_to_params_page(driver, wait, keyword)  # –µ—Å–ª–∏ –Ω–∞—Å —Å—Ä–∞–∑—É –∫–∏–¥–∞–µ—Ç –Ω–∞–∑–∞–¥

                search_input = WebDriverWait(driver, 30).until(EC.presence_of_element_located((By.NAME, "q")))
                full_query = f"{keyword} {EXCLUDE_BLOCK}"
                type_like_human(search_input, full_query)
                search_input.send_keys(Keys.RETURN)

                # –ñ–¥—ë–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (—Å –∞–≤—Ç–æ-–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º)
                wait_for_params_page(driver, wait, timeout=30)

                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—ã (—Å –∞–≤—Ç–æ-–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º)
                set_date_range(driver, START_DATE, END_DATE, wait=wait, keyword=keyword)
                human_sleep(HUMAN_DELAY_MED)

                # –§–∏–ª—å—Ç—Ä (—Å –∞–≤—Ç–æ-–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º)
                if not select_view_range_by_id(driver, wait, input_id, keyword=keyword):
                    raise Exception("–§–∏–ª—å—Ç—Ä –Ω–µ –≤—ã–±—Ä–∞–Ω")

                human_sleep(HUMAN_DELAY_MED)

                # –í—Ç–æ—Ä–æ–π –ø–æ–∏—Å–∫ (—Å –∞–≤—Ç–æ-–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º) –∏ –∂–¥–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                submit_secondary_search(driver, wait, results_timeout=60, keyword=keyword)

                # –≠–∫—Å–ø–æ—Ä—Ç
                if export_and_rename(driver, wait, keyword, range_label):
                    mark_done(progress, keyword, range_label)
                    break
            except Exception as e:
                log(f"–û—à–∏–±–∫–∞: {e}", "ERROR")
            attempt += 1
            time.sleep(random.uniform(5, 10))
        human_sleep(HUMAN_DELAY_LONG)

# ===================== MAIN =====================
if __name__ == "__main__":
    os.makedirs(download_dir, exist_ok=True)
    log("=== –°—Ç–∞—Ä—Ç —Å–∫—Ä–∏–ø—Ç–∞ ===")
    driver = connect_to_existing_chrome(DEBUG_ADDRESS)
    wait = WebDriverWait(driver, 30)
    progress = load_progress()
    try:
        for kw in keywords:
            process_keyword(driver, wait, kw, progress)
        log("‚úÖ –ì–æ—Ç–æ–≤–æ.")
    finally:
        with suppress(Exception):
            driver.quit()
